{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "glog-8fc01852-ad2e-455e-b5b4-b3103a9eb20b",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Detected Issue with C Function (malloc)\" vulnerability in C++ arises when the `malloc` function is used improperly, leading to potential memory allocation issues such as buffer overflows, memory leaks, or improper handling of null pointers. This vulnerability can be exploited to cause a program to crash or behave unpredictably, and in some cases, it can be leveraged to execute arbitrary code.\n\n### General Mitigation Advice\n\n1. **Check Return Values**: Always check the return value of `malloc` to ensure that memory allocation was successful.\n2. **Use Safer Alternatives**: Consider using C++ memory management features like `new` and `delete` or smart pointers (`std::unique_ptr`, `std::shared_ptr`) which provide automatic memory management.\n3. **Initialize Memory**: Use `calloc` instead of `malloc` if you need zero-initialized memory.\n4. **Free Allocated Memory**: Ensure that all allocated memory is properly freed using `free` to prevent memory leaks.\n5. **Boundary Checks**: Implement boundary checks to prevent buffer overflows.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to properly use `malloc` with error checking and memory management:\n\n```cpp\n#include <iostream>\n#include <cstdlib> // Required for malloc and free\n\nint main() {\n    size_t Nbytes = 100;\n    char* buffer = (char*)malloc(Nbytes);\n\n    if (buffer == nullptr) {\n        std::cerr << \"Memory allocation failed\" << std::endl;\n        return 1;\n    }\n\n    // Use the allocated memory\n    // ...\n\n    // Free the allocated memory\n    free(buffer);\n\n    return 0;\n}\n```\n\n### Library Dependencies\n\n- `<cstdlib>`: Required for `malloc` and `free`.\n- `<iostream>`: Required for input and output operations.\n\n### Relevant Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Secure Coding Practices](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer](https://cwe.mitre.org/data/definitions/119.html)\n- [CWE-401: Missing Release of Memory after Effective Lifetime](https://cwe.mitre.org/data/definitions/401.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-6874206f-d535-49c7-9a98-74a28f57c6c8",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Detected Issue with C Function (malloc)\" vulnerability in C++ arises when the `malloc` function is used improperly, leading to potential memory allocation issues such as buffer overflows, memory leaks, or improper handling of null pointers. This vulnerability can be exploited to cause a program to crash or behave unpredictably, and in some cases, it can be leveraged to execute arbitrary code.\n\n### General Mitigation Advice\n\n1. **Check Return Values**: Always check the return value of `malloc` to ensure that memory allocation was successful.\n2. **Use Safer Alternatives**: Consider using C++ memory management features like `new` and `delete` or smart pointers (`std::unique_ptr`, `std::shared_ptr`) which provide automatic memory management.\n3. **Initialize Memory**: Use `calloc` instead of `malloc` if you need zero-initialized memory.\n4. **Free Allocated Memory**: Ensure that all allocated memory is properly freed using `free` to prevent memory leaks.\n5. **Boundary Checks**: Implement boundary checks to prevent buffer overflows.\n\n### Source Code Fix Recommendation\n\nBelow is an example of how to properly use `malloc` with error checking and memory management:\n\n```cpp\n#include <iostream>\n#include <cstdlib> // Required for malloc and free\n\nint main() {\n    size_t Nbytes = 100;\n    char* buffer = (char*)malloc(Nbytes);\n\n    if (buffer == nullptr) {\n        std::cerr << \"Memory allocation failed\" << std::endl;\n        return 1;\n    }\n\n    // Use the allocated memory\n    // ...\n\n    // Free the allocated memory\n    free(buffer);\n\n    return 0;\n}\n```\n\n### Library Dependencies\n\n- `<cstdlib>`: Required for `malloc` and `free`.\n- `<iostream>`: Required for input and output operations.\n\n### Relevant Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Secure Coding Practices](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n\n### Common Weakness Enumeration (CWE)\n\n- [CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer](https://cwe.mitre.org/data/definitions/119.html)\n- [CWE-401: Missing Release of Memory after Effective Lifetime](https://cwe.mitre.org/data/definitions/401.html)\n\nThese links have been verified to be active and accessible to anonymous users."
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-2ac455b6-d714-4f81-8100-2d98d569b30e",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `memcpy` function in C++ is used to copy a block of memory from one location to another. This function is vulnerable to buffer overflow attacks if the size of the data being copied is larger than the size of the destination buffer. In the provided code snippet `memcpy(&r, &v, sizeof(T))`, if the size of `T` is larger than the size of `r`, it can lead to a buffer overflow.\n\nBuffer overflow vulnerabilities can lead to various security issues such as data corruption, system crashes, and unauthorized code execution.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should always ensure that the destination buffer is large enough to hold the data being copied. This can be done by checking the size of the data and the size of the buffer before calling `memcpy`.\n\nAdditionally, consider using safer alternatives to `memcpy` such as `strncpy` or `memcpy_s` (in C11) which include the size of the destination buffer as a parameter, reducing the risk of buffer overflow.\n\n## Source Code Fix Recommendation\n\nHere is a safer version of the code using `strncpy`:\n\n```cpp\n#include <cstring>\n\nstrncpy(&r, &v, sizeof(r));\n```\n\nIn this version, `strncpy` will copy at most `sizeof(r)` bytes from `v` to `r`, preventing a buffer overflow if `v` is larger than `r`.\n\n## Library Dependencies\n\nThe `memcpy` function is part of the C Standard Library, so no additional libraries are needed for the original code. The `strncpy` function is part of the `<cstring>` library in C++.\n\n## References\n\n- [OWASP Buffer Overflow](https://owasp.org/www-community/vulnerabilities/Buffer_Overflow)\n- [CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')](https://cwe.mitre.org/data/definitions/120.html)"
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-00422d76-9267-450e-9f19-81ca2ab1a86d",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `memcpy` function in C++ is used to copy a block of memory from one location to another. This function is vulnerable to buffer overflow attacks if the size of the data being copied is larger than the size of the destination buffer. In the provided code snippet `memcpy(&r, &v, sizeof(T))`, if the size of `T` is larger than the size of `r`, it can lead to a buffer overflow.\n\nBuffer overflow vulnerabilities can lead to various security issues such as data corruption, system crashes, and unauthorized code execution.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, you should always ensure that the destination buffer is large enough to hold the data being copied. This can be done by checking the size of the data and the size of the buffer before calling `memcpy`.\n\nAdditionally, consider using safer alternatives to `memcpy` such as `strncpy` or `memcpy_s` (in C11) which include the size of the destination buffer as a parameter, reducing the risk of buffer overflow.\n\n## Source Code Fix Recommendation\n\nHere is a safer version of the code using `strncpy`:\n\n```cpp\n#include <cstring>\n\nstrncpy(&r, &v, sizeof(r));\n```\n\nIn this version, `strncpy` will copy at most `sizeof(r)` bytes from `v` to `r`, preventing a buffer overflow if `v` is larger than `r`.\n\n## Library Dependencies\n\nThe `memcpy` function is part of the C Standard Library, so no additional libraries are needed for the original code. The `strncpy` function is part of the `<cstring>` library in C++.\n\n## References\n\n- [OWASP Buffer Overflow](https://owasp.org/www-community/vulnerabilities/Buffer_Overflow)\n- [CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')](https://cwe.mitre.org/data/definitions/120.html)"
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-69727f80-9056-4fd6-b8cd-c8e146b80a8a",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Detected Issue with C Function (malloc)\" vulnerability in C++ arises when the `malloc` function is used improperly, leading to potential memory allocation issues. This can occur due to incorrect size calculations, failure to check for successful memory allocation, or improper handling of the allocated memory. In the provided code snippet, `malloc(NUM * sizeof(float)` is used, which may lead to vulnerabilities if `NUM` is not properly validated or if the result of `malloc` is not checked for `NULL`.\n\n### General Mitigation Advice\n\n1. **Validate Input**: Ensure that `NUM` is a positive integer and within a reasonable range to prevent excessive memory allocation.\n2. **Check Allocation Success**: Always check if `malloc` returns `NULL`, indicating a failure to allocate memory.\n3. **Use Safer Alternatives**: Consider using `new` in C++ for memory allocation, which throws an exception on failure, or use smart pointers for automatic memory management.\n4. **Free Allocated Memory**: Ensure that any allocated memory is properly freed to prevent memory leaks.\n\n### Source Code Fix Recommendation\n\n```cpp\n#include <iostream>\n#include <cstdlib> // Required for malloc and free\n\nint main() {\n    const size_t NUM = 10; // Example size, ensure this is validated\n    float* array = static_cast<float*>(malloc(NUM * sizeof(float)));\n\n    if (array == nullptr) {\n        std::cerr << \"Memory allocation failed\" << std::endl;\n        return 1;\n    }\n\n    // Use the allocated memory\n    for (size_t i = 0; i < NUM; ++i) {\n        array[i] = static_cast<float>(i);\n    }\n\n    // Free the allocated memory\n    free(array);\n\n    return 0;\n}\n```\n\n### Library Dependencies\n\n- `<iostream>`: For input and output operations.\n- `<cstdlib>`: For `malloc` and `free` functions.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Secure Coding Practices](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n\n### Common Weakness Enumeration (CWE)\n"
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-862b8a7b-0418-4088-8286-641658cd261a",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Detected Issue with C Function (malloc)\" vulnerability in C++ arises when the `malloc` function is used improperly, leading to potential memory allocation issues. This can occur due to incorrect size calculations, failure to check for successful memory allocation, or improper handling of the allocated memory. In the provided code snippet, `malloc(NUM * sizeof(float)` is used, which may lead to vulnerabilities if `NUM` is not properly validated or if the result of `malloc` is not checked for `NULL`.\n\n### General Mitigation Advice\n\n1. **Validate Input**: Ensure that `NUM` is a positive integer and within a reasonable range to prevent excessive memory allocation.\n2. **Check Allocation Success**: Always check if `malloc` returns `NULL`, indicating a failure to allocate memory.\n3. **Use Safer Alternatives**: Consider using `new` in C++ for memory allocation, which throws an exception on failure, or use smart pointers for automatic memory management.\n4. **Free Allocated Memory**: Ensure that any allocated memory is properly freed to prevent memory leaks.\n\n### Source Code Fix Recommendation\n\n```cpp\n#include <iostream>\n#include <cstdlib> // Required for malloc and free\n\nint main() {\n    const size_t NUM = 10; // Example size, ensure this is validated\n    float* array = static_cast<float*>(malloc(NUM * sizeof(float)));\n\n    if (array == nullptr) {\n        std::cerr << \"Memory allocation failed\" << std::endl;\n        return 1;\n    }\n\n    // Use the allocated memory\n    for (size_t i = 0; i < NUM; ++i) {\n        array[i] = static_cast<float>(i);\n    }\n\n    // Free the allocated memory\n    free(array);\n\n    return 0;\n}\n```\n\n### Library Dependencies\n\n- `<iostream>`: For input and output operations.\n- `<cstdlib>`: For `malloc` and `free` functions.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Secure Coding Practices](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n\n### Common Weakness Enumeration (CWE)\n"
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-bdc0d2cb-a9e2-4acc-b34a-45bf36273699",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Detected Issue with C Function (malloc)\" vulnerability in C++ arises when the `malloc` function is used improperly, leading to potential memory allocation issues. This can occur due to incorrect size calculations, failure to check for successful memory allocation, or improper handling of the allocated memory. In the provided code snippet, `malloc(NUM * sizeof(float)` is used, which may lead to vulnerabilities if `NUM` is not properly validated or if the result of `malloc` is not checked for `NULL`.\n\n### General Mitigation Advice\n\n1. **Validate Input**: Ensure that `NUM` is a positive integer and within a reasonable range to prevent excessive memory allocation.\n2. **Check Allocation Success**: Always check if `malloc` returns `NULL`, indicating a failure to allocate memory.\n3. **Use Safer Alternatives**: Consider using `new` in C++ for memory allocation, which throws an exception on failure, or use smart pointers for automatic memory management.\n4. **Free Allocated Memory**: Ensure that any allocated memory is properly freed to prevent memory leaks.\n\n### Source Code Fix Recommendation\n\n```cpp\n#include <iostream>\n#include <cstdlib> // Required for malloc and free\n\nint main() {\n    const size_t NUM = 10; // Example size, ensure this is validated\n    float* array = static_cast<float*>(malloc(NUM * sizeof(float)));\n\n    if (array == nullptr) {\n        std::cerr << \"Memory allocation failed\" << std::endl;\n        return 1;\n    }\n\n    // Use the allocated memory\n    for (size_t i = 0; i < NUM; ++i) {\n        array[i] = static_cast<float>(i);\n    }\n\n    // Free the allocated memory\n    free(array);\n\n    return 0;\n}\n```\n\n### Library Dependencies\n\n- `<iostream>`: For input and output operations.\n- `<cstdlib>`: For `malloc` and `free` functions.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Secure Coding Practices](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n\n### Common Weakness Enumeration (CWE)\n"
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-9cc63da9-beb1-4d27-819c-1fa858618e1b",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Detected Issue with C Function (malloc)\" vulnerability in C++ arises when the `malloc` function is used improperly, leading to potential memory allocation issues. This can occur due to incorrect size calculations, failure to check for successful memory allocation, or improper handling of the allocated memory. In the provided code snippet, `malloc(NUM * sizeof(float)` is used, which may lead to vulnerabilities if `NUM` is not properly validated or if the result of `malloc` is not checked for `NULL`.\n\n### General Mitigation Advice\n\n1. **Validate Input**: Ensure that `NUM` is a positive integer and within a reasonable range to prevent excessive memory allocation.\n2. **Check Allocation Success**: Always check if `malloc` returns `NULL`, indicating a failure to allocate memory.\n3. **Use Safer Alternatives**: Consider using `new` in C++ for memory allocation, which throws an exception on failure, or use smart pointers for automatic memory management.\n4. **Free Allocated Memory**: Ensure that any allocated memory is properly freed to prevent memory leaks.\n\n### Source Code Fix Recommendation\n\n```cpp\n#include <iostream>\n#include <cstdlib> // Required for malloc and free\n\nint main() {\n    const size_t NUM = 10; // Example size, ensure this is validated\n    float* array = static_cast<float*>(malloc(NUM * sizeof(float)));\n\n    if (array == nullptr) {\n        std::cerr << \"Memory allocation failed\" << std::endl;\n        return 1;\n    }\n\n    // Use the allocated memory\n    for (size_t i = 0; i < NUM; ++i) {\n        array[i] = static_cast<float>(i);\n    }\n\n    // Free the allocated memory\n    free(array);\n\n    return 0;\n}\n```\n\n### Library Dependencies\n\n- `<iostream>`: For input and output operations.\n- `<cstdlib>`: For `malloc` and `free` functions.\n\n### OWASP Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Secure Coding Practices](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n\n### Common Weakness Enumeration (CWE)\n"
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "glog-8fc01852-ad2e-455e-b5b4-b3103a9eb20b",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "\"Detected Issue with C Function (malloc)\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/square/square.cpp"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 22,
                  "endLine": 52,
                  "endColumn": 36,
                  "charOffset": 2131,
                  "charLength": 14,
                  "snippet": {
                    "text": "malloc(Nbytes)",
                    "rendered": {
                      "text": "malloc(Nbytes)",
                      "markdown": "`malloc(Nbytes)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "examples/square/square.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2131,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-6874206f-d535-49c7-9a98-74a28f57c6c8",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "\"Detected Issue with C Function (malloc)\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/square/square.cpp"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 22,
                  "endLine": 54,
                  "endColumn": 36,
                  "charOffset": 2229,
                  "charLength": 14,
                  "snippet": {
                    "text": "malloc(Nbytes)",
                    "rendered": {
                      "text": "malloc(Nbytes)",
                      "markdown": "`malloc(Nbytes)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "examples/square/square.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2229,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-2ac455b6-d714-4f81-8100-2d98d569b30e",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Detected Vulnerability in C Function (memcpy)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/include/hip/detail/helpers.hpp"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 29,
                  "endLine": 65,
                  "endColumn": 53,
                  "charOffset": 2299,
                  "charLength": 24,
                  "snippet": {
                    "text": "memcpy(&r, &v, sizeof(T)",
                    "rendered": {
                      "text": "memcpy(&r, &v, sizeof(T)",
                      "markdown": "`memcpy(&r, &v, sizeof(T)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/include/hip/detail/helpers.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2299,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&r, <size of &r>,  &v,  sizeof(T)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-00422d76-9267-450e-9f19-81ca2ab1a86d",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Detected Vulnerability in C Function (memcpy)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/include/hip/detail/helpers.hpp"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 33,
                  "endLine": 57,
                  "endColumn": 57,
                  "charOffset": 1940,
                  "charLength": 24,
                  "snippet": {
                    "text": "memcpy(&r, &v, sizeof(T)",
                    "rendered": {
                      "text": "memcpy(&r, &v, sizeof(T)",
                      "markdown": "`memcpy(&r, &v, sizeof(T)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/include/hip/detail/helpers.hpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1940,
                        "charLength": 24
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&r, <size of &r>,  &v,  sizeof(T)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-69727f80-9056-4fd6-b8cd-c8e146b80a8a",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "\"Detected Issue with C Function (malloc)\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/shared_memory/sharedMemory.cpp"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 33,
                  "endLine": 61,
                  "endColumn": 59,
                  "charOffset": 1659,
                  "charLength": 26,
                  "snippet": {
                    "text": "malloc(NUM * sizeof(float)",
                    "rendered": {
                      "text": "malloc(NUM * sizeof(float)",
                      "markdown": "`malloc(NUM * sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "examples/shared_memory/sharedMemory.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1659,
                        "charLength": 26
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-862b8a7b-0418-4088-8286-641658cd261a",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "\"Detected Issue with C Function (malloc)\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/shared_memory/sharedMemory.cpp"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 21,
                  "endLine": 59,
                  "endColumn": 47,
                  "charOffset": 1538,
                  "charLength": 26,
                  "snippet": {
                    "text": "malloc(NUM * sizeof(float)",
                    "rendered": {
                      "text": "malloc(NUM * sizeof(float)",
                      "markdown": "`malloc(NUM * sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "examples/shared_memory/sharedMemory.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1538,
                        "charLength": 26
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-bdc0d2cb-a9e2-4acc-b34a-45bf36273699",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "\"Detected Issue with C Function (malloc)\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/occupancy/occupancy.cpp"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 19,
                  "endLine": 91,
                  "endColumn": 45,
                  "charOffset": 3158,
                  "charLength": 26,
                  "snippet": {
                    "text": "malloc(NUM * sizeof(float)",
                    "rendered": {
                      "text": "malloc(NUM * sizeof(float)",
                      "markdown": "`malloc(NUM * sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "examples/occupancy/occupancy.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3158,
                        "charLength": 26
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-9cc63da9-beb1-4d27-819c-1fa858618e1b",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "\"Detected Issue with C Function (malloc)\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "examples/occupancy/occupancy.cpp"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 19,
                  "endLine": 90,
                  "endColumn": 45,
                  "charOffset": 3110,
                  "charLength": 26,
                  "snippet": {
                    "text": "malloc(NUM * sizeof(float)",
                    "rendered": {
                      "text": "malloc(NUM * sizeof(float)",
                      "markdown": "`malloc(NUM * sizeof(float)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "examples/occupancy/occupancy.cpp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3110,
                        "charLength": 26
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}